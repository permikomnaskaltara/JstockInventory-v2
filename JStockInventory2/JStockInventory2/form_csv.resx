<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="FolderBrowserDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABAAAGEPAABhDwAAAAEAAAAB
        AAD+/v4A9PT0APz2/QD8/vUA9PX9APX99AD79vQA9f39APDu9gDh3+MAx8zTANXV1QClpqcAhIOEAIyS
        lADDxMQA4+PkAOzs7ADJycsAl5iYAHNzcwBUTlYAY11jAG1lawDe6OgA29rZALe3twBkXFoATExMAFRM
        SgBYWFcAW1tWAHh4egC0yc8AVFRTAHJoXgBrZF0AbF5pAHp+ggCxsa8A6uvlAMTIvACIiYoAXFxcAGNj
        YwBra2QAc3NoAHJpagCCg3cAoaORAGRqZQBra2sAS0c2AGhmWwDs9P4A+frsAGtkZQBXVEwAfYJ3AMrm
        +ADS7f4AyNj+ALvT+wDm6P8A7Pz9AO/+7ABkaWsAY2RrAMfT2gC63P0AlLb1AGqa6QBnhOcAiKb3AKnH
        9wDK3P0A4/r+ADo6OgBOVFYAW1piAGlwcABcYFsAzOz+AKfY/AB3qfUARobWAChw1gBEd+kAs9f5AF5k
        ZQDE1uQAiMf3AFqO7AAmdeYAGXXnABdp5wAHZOoAFljpAChm5wBul/EA2+z/ALnN0gDC6v4Al8j4AEWG
        5wAUd/cABmj2AAhZ9QAJSvkAClnqACla5QCLlPQAt7z4ANjc/QC0ucAAq7i5AM7l6gAzfO0AC2P1AAJs
        /AABZPwAFkPsACVO6gBFVeYAb3rsANfm+wC68v4Amdb4AGGp6QAzj9kAJYbnAApz/QALa/0AA3P8AEpi
        3ADT8/4Aueb9AHa66gBEmNgAJ4fVABJw3AAMefcADFv9AAxT+gARMtkAKDzlAFVp5gC2yvkAeqrpAA2F
        7AAKhPsAAXvzAAJ7/QATMO8AqLb5AGprcQB1hYMA7Pf1AAKE/AACdfQAC0T+AA4s+QATHdEANTi+AH58
        2ADHyPwAO0VEANzz/wDd+/8ABnfqABVn+gATVP0ACjj7AJ6ytACz5f0AVZjpADiF5QAYdtkAOD3QAKq6
        xADF8/0Ahrz1AHy39gBXqOkARZrpAFmu8AB6w/gAzfL9ADZ22QB6xu8AR6bnACeV6AAXi+gAarfoADNq
        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
        AAAAAAAAAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAwMCAgUCAwAD
        AwMDAwMAAAIAAgIAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAAAAAgAAAwIAAAAAAAAA
        AwMDAAADAwMDAAQAAgIAAgAAAgICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>